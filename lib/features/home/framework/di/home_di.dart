import 'package:flutter_riverpod/flutter_riverpod.dart';import 'package:whatsappsendnumber/features/home/data/data_source/countries_local_data_source.dart';import 'package:whatsappsendnumber/features/home/data/data_source/countries_remote_data_source.dart';import 'package:whatsappsendnumber/features/home/data/repository/countries_remote_repository.dart';import 'package:whatsappsendnumber/features/home/data/repository/mapper/map_countries_response_to_country_dto.dart';import 'package:whatsappsendnumber/features/home/framework/data/implementation/data_source/countries_local_data_source_impl.dart';import 'package:whatsappsendnumber/features/home/framework/data/implementation/data_source/countries_remote_data_source_impl.dart';import 'package:whatsappsendnumber/features/home/framework/presentation/provider/home_provider.dart';import 'package:whatsappsendnumber/features/home/framework/presentation/ui_models/home_state.dart';import 'package:whatsappsendnumber/features/home/usescases/download_countries_use_cases.dart';import 'package:whatsappsendnumber/features/splash/framework/di/splash_di.dart';import 'package:whatsappsendnumber/features/start_chat/framework/di/start_chat_di.dart';final mapCountriesResponseToCountryDtoProvider = Provider<MapCountriesResponseToCountryDto>((provider) => MapCountriesResponseToCountryDto());final countriesLocalDataSourceImplProvider =    Provider<CountriesLocalDataSource>((provider) => CountriesLocalDataSourceImpl(provider.read(countryDataBaseImplProvider)));final countriesRemoteDataSourceProvider = Provider<CountriesRemoteDataSource>((provider) => CountriesRemoteDataSourceImpl());final countriesRemoteRepositoryProvider = Provider<CountriesRemoteRepository>((provider) => CountriesRemoteRepository(    provider.read(countriesRemoteDataSourceProvider),    provider.read(countriesLocalDataSourceImplProvider),    provider.read(mapCountriesResponseToCountryDtoProvider)));final downloadCountriesUseCasesProvider =    Provider<DownloadCountriesUseCases>((provider) => DownloadCountriesUseCases(provider.read(countriesRemoteRepositoryProvider)));final homeProvider = StateNotifierProvider.autoDispose<HomeProvider, HomeState>((provider) {  return HomeProvider(provider.read(analyticsSenderEventsProvider), provider.read(downloadCountriesUseCasesProvider));});