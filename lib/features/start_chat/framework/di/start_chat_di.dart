import 'package:flutter_riverpod/flutter_riverpod.dart';import 'package:whatsappsendnumber/core/db/features/country_data_base/data_base/country_daba_base_impl.dart';import 'package:whatsappsendnumber/core/db/features/get_url_launch_chat/get_url_lauch_chat_use_cases.dart';import 'package:whatsappsendnumber/core/db/features/message_short/data_base/message_short_daba_base_impl.dart';import 'package:whatsappsendnumber/resources/di/app_di.dart';import 'package:whatsappsendnumber/features/history/framework/di/history_di.dart';import 'package:whatsappsendnumber/features/splash/framework/di/splash_di.dart';import 'package:whatsappsendnumber/features/start_chat/data/data_source/country_data_source.dart';import 'package:whatsappsendnumber/features/start_chat/data/data_source/message_short_data_source.dart';import 'package:whatsappsendnumber/features/start_chat/data/repository/country_repository.dart';import 'package:whatsappsendnumber/features/start_chat/data/repository/message_short_repository.dart';import 'package:whatsappsendnumber/features/start_chat/framework/data/implementation/data_source/country_data_source_impl.dart';import 'package:whatsappsendnumber/features/start_chat/framework/data/implementation/data_source/mapper/map_country_dto_to_country_model.dart';import 'package:whatsappsendnumber/features/start_chat/framework/data/implementation/data_source/mapper/map_message_short_dto_to_message_short_model.dart';import 'package:whatsappsendnumber/features/start_chat/framework/data/implementation/data_source/message_short_data_source_impl.dart';import 'package:whatsappsendnumber/features/start_chat/framework/presentation/page/ui_models/start_chat_state.dart';import 'package:whatsappsendnumber/features/start_chat/framework/presentation/provider/mapper/map_country_model_to_country_state.dart';import 'package:whatsappsendnumber/features/start_chat/framework/presentation/provider/mapper/map_message_short_model_to_message_short_state.dart';import 'package:whatsappsendnumber/features/start_chat/framework/presentation/provider/start_chat_provider.dart';import 'package:whatsappsendnumber/features/start_chat/use_cases/get_countries_use_cases.dart';import 'package:whatsappsendnumber/features/start_chat/use_cases/get_country_current_use_cases.dart';import 'package:whatsappsendnumber/features/start_chat/use_cases/get_message_short_use_cases.dart';import 'package:whatsappsendnumber/features/start_chat/use_cases/update_country_current_use_cases.dart';import 'package:whatsappsendnumber/features/start_chat/use_cases/update_message_short_use_cases.dart';final countryDataBaseImplProvider = Provider<CountryDataBaseImpl>((provider) => CountryDataBaseImpl(provider.read(dataBaseProvider)));final messageShortImplProvider = Provider<MessageShortImpl>((provider) => MessageShortImpl(provider.read(dataBaseProvider)));final mapCountryDtoToCountryModelProvider = Provider<MapCountryDtoToCountryModel>((provider) => MapCountryDtoToCountryModel());final mapMessageShortDtoToMessageShortModelProvider =    Provider<MapMessageShortDtoToMessageShortModel>((provider) => MapMessageShortDtoToMessageShortModel());final countriesDataSourceImplProvider = Provider<CountryDataSource>(    (provider) => CountryDataSourceImpl(provider.read(countryDataBaseImplProvider), provider.read(mapCountryDtoToCountryModelProvider)));final messageShortDataSourceProvider = Provider<MessageShortDataSource>(    (provider) => MessageShortDataSourceImpl(provider.read(messageShortImplProvider), provider.read(mapMessageShortDtoToMessageShortModelProvider)));final countryRepositoryProvider = Provider<CountryRepository>((provider) => CountryRepository(provider.read(countriesDataSourceImplProvider)));final messageShortRepositoryProvider =    Provider<MessageShortRepository>((provider) => MessageShortRepository(provider.read(messageShortDataSourceProvider)));final getCountryCurrentUseCasesProvider =    Provider<GetCountryCurrentUseCases>((provider) => GetCountryCurrentUseCases(provider.read(countryRepositoryProvider)));final getCountriesUseCasesProvider = Provider<GetCountriesUseCases>((provider) => GetCountriesUseCases(provider.read(countryRepositoryProvider)));final updateCountryCurrentUseCasesProvider =    Provider<UpdateCountryCurrentUseCases>((provider) => UpdateCountryCurrentUseCases(provider.read(countryRepositoryProvider)));final getMessageShortUseCasesProvider =    Provider<GetMessageShortUseCases>((provider) => GetMessageShortUseCases(provider.read(messageShortRepositoryProvider)));final updateMessageShortUseCasesProvider =    Provider<UpdateMessageShortUseCases>((provider) => UpdateMessageShortUseCases(provider.read(messageShortRepositoryProvider)));final mapCountryModelCountryStateProvider = Provider<MapCountryModelCountryState>((provider) => MapCountryModelCountryState());final mapMessageShortModelToMessageShortStateProvider =    Provider<MapMessageShortModelToMessageShortState>((provider) => MapMessageShortModelToMessageShortState());final getUrlLauncherChatUseCasesProvider = Provider<GetUrlLauncherChatUseCases>((provider) => GetUrlLauncherChatUseCases());final startChatProvider = StateNotifierProvider.autoDispose<StartChatProvider, StartChatState>((provider) {  return StartChatProvider(      provider.read(savePhoneNumberUsesCasesProvider),      provider.read(analyticsSenderEventsProvider),      provider.read(getCountryCurrentUseCasesProvider),      provider.read(mapCountryModelCountryStateProvider),      provider.read(getCountriesUseCasesProvider),      provider.read(updateCountryCurrentUseCasesProvider),      provider.read(getMessageShortUseCasesProvider),      provider.read(updateMessageShortUseCasesProvider),      provider.read(mapMessageShortModelToMessageShortStateProvider),      provider.read(getUrlLauncherChatUseCasesProvider));});