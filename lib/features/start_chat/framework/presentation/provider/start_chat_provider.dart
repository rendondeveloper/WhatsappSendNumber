import 'package:flutter_riverpod/flutter_riverpod.dart';import 'package:whatsappsendnumber/core/analitycs/analytics_constants.dart';import 'package:whatsappsendnumber/core/analitycs/analytics_sender_events.dart';import 'package:whatsappsendnumber/core/db/features/get_url_launch_chat/get_url_lauch_chat_use_cases.dart';import 'package:whatsappsendnumber/core/db/features/number_phone_data_base/framework/data/config/model/number_phone_local.dart';import 'package:whatsappsendnumber/core/db/features/number_phone_data_base/usescase/save_phone_number_uses_case.dart';import 'package:whatsappsendnumber/features/start_chat/domain/models/message_short_model.dart';import 'package:whatsappsendnumber/features/start_chat/framework/presentation/page/ui_models/country_state.dart';import 'package:whatsappsendnumber/features/start_chat/framework/presentation/page/ui_models/start_chat_state.dart';import 'package:whatsappsendnumber/features/start_chat/framework/presentation/provider/mapper/map_country_model_to_country_state.dart';import 'package:whatsappsendnumber/features/start_chat/framework/presentation/provider/mapper/map_message_short_model_to_message_short_state.dart';import 'package:whatsappsendnumber/features/start_chat/use_cases/get_countries_use_cases.dart';import 'package:whatsappsendnumber/features/start_chat/use_cases/get_country_current_use_cases.dart';import 'package:whatsappsendnumber/features/start_chat/use_cases/get_message_short_use_cases.dart';import 'package:whatsappsendnumber/features/start_chat/use_cases/update_country_current_use_cases.dart';import 'package:whatsappsendnumber/features/start_chat/use_cases/update_message_short_use_cases.dart';import 'package:whatsappsendnumber/resources/extensions/extension_string.dart';class StartChatProvider extends StateNotifier<StartChatState> {  final GetUrlLauncherChatUseCases _getUrlLauncherChatUseCases;  final AnalyticsSenderEvents _analyticsSenderEvents;  final SavePhoneNumberUsesCases _saveNumberPhoneUesCase;  final GetCountryCurrentUseCases _getCountryUseCases;  final GetCountriesUseCases _getCountriesUseCases;  final UpdateCountryCurrentUseCases _updateCurrentCountryUseCases;  final MapCountryModelCountryState _mapCountryModelCountryState;  final GetMessageShortUseCases _getMessageShortUseCases;  final UpdateMessageShortUseCases _updateMessageShortUseCases;  final MapMessageShortModelToMessageShortState _mapMessageShortModelToMessageShortState;  StartChatProvider(      this._saveNumberPhoneUesCase,      this._analyticsSenderEvents,      this._getCountryUseCases,      this._mapCountryModelCountryState,      this._getCountriesUseCases,      this._updateCurrentCountryUseCases,      this._getMessageShortUseCases,      this._updateMessageShortUseCases,      this._mapMessageShortModelToMessageShortState,      this._getUrlLauncherChatUseCases)      : super(const StartChatState()) {    _sendScreen();    _getCountry();    _getCountries();  }  void onEvent(String event) {    _analyticsSenderEvents.onEvent(AnalyticsConstants.pageTabHistoryEvent, parameters: {AnalyticsConstants.pageTabHistoryEventItem: event});  }  void _sendScreen() {    _analyticsSenderEvents.sendScreen(AnalyticsConstants.pageTabSendMessage);  }  Future<void> launchChat(String number, String message) async {    final phone = "${state.country.code}$number";    await _saveNumberPhoneUesCase.invoke(PhoneNumberLocal(identifier: 0, message: message, number: phone, date: DateTime.now().toConvertDMMYYYY()));    final urlLaunch = _getUrlLauncherChatUseCases.invoke(phone, message);    state = state.copyWith(numberToLaunch: urlLaunch);    state = state.copyWith(numberToLaunch: "");  }  void onUpdateMessage(String text) async {    await _updateMessageShortUseCases.invoke(MessageShortModel(state.message.identifier, text));    if (state.message.identifier == 0) {      final message = await _getMessageShortUseCases.invoke();      state = state.copyWith(message: _mapMessageShortModelToMessageShortState.map(message));    }  }  void updateCountryCurrent(CountryState countryState) async {    await _updateCurrentCountryUseCases.invoke(countryState.identifier);    _getCountry();  }  void _getCountry() async {    final country = await _getCountryUseCases.invoke();    final message = await _getMessageShortUseCases.invoke();    state = state.copyWith(country: _mapCountryModelCountryState.map(country), message: _mapMessageShortModelToMessageShortState.map(message));  }  void _getCountries() async {    final countries = await _getCountriesUseCases.invoke();    state = state.copyWith(countries: countries.map((item) => _mapCountryModelCountryState.map(item)).toList());  }}