import 'package:sqflite/sqflite.dart';import 'package:whatsappsendnumber/core/db/data_base/data_base.dart';import 'package:whatsappsendnumber/core/db/data_base/tables.dart';import 'package:whatsappsendnumber/features/start_chat/framework/data/config/response/country_dto.dart';import 'package:whatsappsendnumber/resources/extensions/extension_string.dart';class CountryDataBaseImpl {  final DataBaseLocal _dataBaseLocal;  CountryDataBaseImpl(this._dataBaseLocal);  Future<CountryDto> getCountryCurrent() async {    final db = await _dataBaseLocal.createDatabase();    final mapsSelected = await db.query(countryTable, where: "$countrySelected = ?", whereArgs: [true]);    if (mapsSelected.isNotEmpty) {      return CountryDto(          int.parse(mapsSelected[0][countryIdentifier].toString()),          mapsSelected[0][countryName].toString(),          mapsSelected[0][countryIso2].toString(),          mapsSelected[0][countryIso3].toString(),          mapsSelected[0][countryLada].toString(),          mapsSelected[0][countrySelected].toString().toBool());    } else {      final first = await db.rawQuery("SELECT * FROM $countryTable ORDER BY $countryIdentifier ASC LIMIT 1");      return CountryDto(int.parse(first[0][countryIdentifier].toString()), first[0][countryName].toString(), first[0][countryIso2].toString(),          first[0][countryIso3].toString(), first[0][countryLada].toString(), first[0][countrySelected].toString().toBool());    }  }  Future<void> updateCountryCurrent(int identifier) async {    final db = await _dataBaseLocal.createDatabase();    await db.update(countryTable, {countrySelected: false}, where: "$countrySelected = ?", whereArgs: [true]);    await db.update(countryTable, {countrySelected: true}, where: "$countryIdentifier = ?", whereArgs: [identifier]);  }  Future<List<CountryDto>> getAllCountries() async {    final db = await _dataBaseLocal.createDatabase();    final List<Map<String, dynamic>> maps = await db.query(countryTable, orderBy: "$countryIdentifier ASC");    final phoneNumbers = List.generate(maps.length, (counter) {      return CountryDto(          int.parse(maps[counter][countryIdentifier].toString()),          maps[counter][countryName].toString(),          maps[counter][countryIso2].toString(),          maps[counter][countryIso3].toString(),          maps[counter][countryLada].toString(),          maps[counter][countrySelected].toString().toBool());    });    return phoneNumbers;  }  Future<bool> insertCountries(List<CountryDto> list) async {    final db = await _dataBaseLocal.createDatabase();    await db.transaction((txn) async {      Batch batch = txn.batch();      batch.delete(countryTable);      for (var item in list) {        final query = 'INSERT INTO $countryTable($countryName, $countryIso2, '            '$countryIso3, $countryLada, $countrySelected) '            'VALUES("${item.nameFull}", "${item.codeIso2}", "${item.codeIso3}", "${item.number}", 0)';        batch.rawInsert(query);      }      batch.commit(noResult: true);    });    return true;  }}